
// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}
{{^-first}}
{{/-first}}
	{{name}} {{^isNullable}}*{{/isNullable}}{{{dataType}}} `tfsdk:"{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}"`
{{/vars}}
}

func (tfData *{{classname}}) ToTF(apiData *sempv2.{{classname}}) {
	{{#vars}}
	AssignIfDstNotNil(&tfData.{{name}}, {{^isString}}{{^isNumeric}}{{^isBoolean}}{{dataType}}ToTF({{/isBoolean}}{{/isNumeric}}{{/isString}}apiData.{{name}}{{^isString}}{{^isNumeric}}{{^isBoolean}}){{/isBoolean}}{{/isNumeric}}{{/isString}})
	{{/vars}}
}

func (tfData *{{classname}}) ToApi() *sempv2.{{classname}} {
	return &sempv2.{{classname}}{
		{{#vars}}
		{{name}}: tfData.{{name}}{{^isString}}{{^isNumeric}}{{^isBoolean}}.ToApi(){{/isBoolean}}{{/isNumeric}}{{/isString}},
		{{/vars}}
	}
}

// Terraform Resource schema for {{classname}}
func {{classname}}ResourceSchema(requiredAttributes ...string) schema.Schema {
	schema := schema.Schema{
		Description: "{{{description}}}{{^description}}{{classname}}{{/description}}",
		Attributes: map[string]schema.Attribute{
			{{#vars}}
			"{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}": schema.{{#tfAttributeType}}{{dataType}}{{/tfAttributeType}}{
				Description: "{{{description}}}",
				Required: contains(requiredAttributes, "{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}"),
				Optional: !contains(requiredAttributes, "{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}"),
				{{^isString}}{{^isNumeric}}{{^isBoolean}}
				AttributeTypes: {{dataType}}AttributeTypes,
				{{/isBoolean}}{{/isNumeric}}{{/isString}}
				{{#vendorExtensions.hasStringValidators}}
				Validators: []validator.String{
				{{#minLength}}
					stringvalidator.LengthAtLeast({{minLength}}),
				{{/minLength}}
				{{#maxLength}}
					stringvalidator.LengthAtMost({{maxLength}}),
				{{/maxLength}}
				{{#pattern}}
					stringvalidator.RegexMatches(regexp.MustCompile("{{pattern}}"), "Does not match pattern '{{pattern}}'"),
				{{/pattern}}
				{{#allowableValues}}
					stringvalidator.OneOf({{#enumVars}}{{^-first}},{{/-first}}{{{value}}}{{/enumVars}}),
				{{/allowableValues}}
				},
				{{/vendorExtensions.hasStringValidators}}
				{{#isString}}
				PlanModifiers: StringPlanModifiersFor("{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}", requiredAttributes),
				{{/isString}}
			},
			{{/vars}}
		},
	}

	return schema
}
